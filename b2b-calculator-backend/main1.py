# FastAPI framework for building APIs / FastAPI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è API
from typing import Optional
import re
from bs4 import BeautifulSoup
# from fastapi import FastAPI, HTTPException, requests
from fastapi import FastAPI, HTTPException
import requests
# BaseModel is used to define request schemas / BaseModel –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–ø–∏—Å—É —Å—Ö–µ–º –∑–∞–ø–∏—Ç—ñ–≤
from pydantic import BaseModel
# Import CORSMiddleware
from fastapi.middleware.cors import CORSMiddleware

# Create FastAPI app / –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É FastAPI
app = FastAPI(title="Kalkulator sk≈Çadek B2B (Polska)")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS ===
# –°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª (origins), —è–∫–∏–º –¥–æ–∑–≤–æ–ª–µ–Ω–æ —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏.
# –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ Vite (–∑–∞–∑–≤–∏—á–∞–π http://localhost:5173)
# –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ "*" –¥–ª—è –¥–æ–∑–≤–æ–ª—É –≤—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª (–º–µ–Ω—à –±–µ–∑–ø–µ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É)
origins = [
    "http://localhost:5173",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ä—Ç Vite
    "http://127.0.0.1:5173",
    # –î–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ –∞–¥—Ä–µ—Å—É –≤–∞—à–æ–≥–æ frontend'—É, —è–∫—â–æ –≤—ñ–Ω –±—É–¥–µ –Ω–∞ —ñ–Ω—à–æ–º—É –ø–æ—Ä—Ç—É/–¥–æ–º–µ–Ω—ñ
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # –î–æ–∑–≤–æ–ª–µ–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞
    allow_credentials=True,  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∫—É–∫—ñ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    allow_methods=["*"],    # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ (GET, POST, etc.)
    allow_headers=["*"],    # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)
# === –ö—ñ–Ω–µ—Ü—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS ===

# Request schema: monthly income and optional tax discount
# –°—Ö–µ–º–∞ –∑–∞–ø–∏—Ç—É: —â–æ–º—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥ —Ç–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –ø–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–Ω–∏–∂–∫–∞


class QuotaInput(BaseModel):
    income: float  # Monthly income in PLN / –ú—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥ —É –∑–ª–æ—Ç–∏—Ö
    forma_opodatkowania: str  # "ryczalt_15", "ryczalt_12", "liniowy_19", "skala"
    stawka_vat: float = 0.0
    # Whether user has PIT discount / –ß–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–¥–∞—Ç–∫–æ–≤—É –ø—ñ–ª—å–≥—É
    has_tax_discount: bool = False


@app.post("/oblicz")  # Translated endpoint name / –ù–∞–∑–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É –ø–æ–ª—å—Å—å–∫–æ—é
# Function to calculate Polish taxes / –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ–ª—å—Å—å–∫–∏—Ö –ø–æ–¥–∞—Ç–∫—ñ–≤
# –û–±—á–∏—Å–ª—é—î ZUS, PIT —Ç–∞ sk≈Çadkƒô zdrowotnƒÖ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def calculate_polish_taxes(data: QuotaInput):
    if data.income < 0:
        # Error if income is negative / –ü–æ–º–∏–ª–∫–∞, —è–∫—â–æ –¥–æ—Ö—ñ–¥ –≤—ñ–¥'—î–º–Ω–∏–π
        raise HTTPException(
            status_code=400, detail="Doch√≥d nie mo≈ºe byƒá ujemny")

    # üëâ Fixed contributions for Polish B2B (example values from 2024)
    # –§—ñ–∫—Å–æ–≤–∞–Ω—ñ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–∞–º–æ–∑–∞–π–Ω—è—Ç–∏—Ö —É –ü–æ–ª—å—â—ñ (–¥–∞–Ω—ñ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω—ñ, 2024 —Ä.)
    # Base social insurance (ZUS) in PLN / –û—Å–Ω–æ–≤–Ω–∏–π —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫ ZUS
    zus = 1600.0
    pit_rate = 0.12  # PIT (standard 12%) / –ü–æ–¥–∞—Ç–æ–∫ PIT (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞ 12%)
    health_rate = 0.09  # Health contribution / –í–Ω–µ—Å–æ–∫ –Ω–∞ –º–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–≤–∫–∏ –ø–æ–¥–∞—Ç–∫—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ñ–æ—Ä–º–∏ –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è
    if data.forma_opodatkowania == "ryczalt_15":
        pit_rate = 0.15
    elif data.forma_opodatkowania == "ryczalt_12":
        pit_rate = 0.12
    elif data.forma_opodatkowania == "liniowy_19":
        pit_rate = 0.19
    elif data.forma_opodatkowania == "skala":
        if data.income <= 120000:
            pit_rate = 0.12111
        else:
            pit_rate = 0.32
    else:
        raise HTTPException(
            status_code=400, detail="Nieprawid≈Çowa forma opodatkowania")

    # üëâ Calculate PIT / –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ PIT
    pit = data.income * pit_rate
    if data.has_tax_discount:
        pit *= 0.5  # Apply 50% tax relief / –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—ñ–ª—å–≥–∏ 50%

    # üëâ Calculate health insurance / –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ–¥–∏—á–Ω–æ–≥–æ –≤–Ω–µ—Å–∫—É
    health = data.income * health_rate

    # –í–∏—Ä–∞—Ö—É–≤–∞–Ω–Ω—è VAT
    vat_amount = data.income * (data.stawka_vat / 100)

    # üëâ Total monthly burden / –ü—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –º—ñ—Å—è—Ü—å
    total_tax = zus + pit + health + vat_amount

    return {
        "ZUS": zus,
        "Podatek PIT": round(pit, 2),
        "Sk≈Çadka zdrowotna": round(health, 2),
        "VAT": round(vat_amount, 2),
        "Ca≈Çkowite sk≈Çadki": round(total_tax, 2)
    }


class SalaryResponse(BaseModel):
    year: int
    avg_salary: Optional[int] = None
    zus_base: Optional[float] = None


def fetch_avg_salary():
    salaryYear = 2025
    patternTextMinimal = rf"Kwota\s+prognozowanego\s+przeciƒôtnego\s+wynagrodzenia\s+w\s+{salaryYear}\s+roku\s+wynosi\s+([\d\s.]+)\s*z≈Ç\.?"
    url = f"https://www.zus.pl/-/nowe-wysoko%C5%9Bci-sk%C5%82adek-na-ubezpieczenia-spo%C5%82eczne-w-{salaryYear}-r.?p_l_back_url=%2Fwyniki-wyszukiwania%3Fquery%3Dkwota%2Bprognozowanego%2Bprzeci%25C4%2599tnego%2Bwynagrodzenia%26dateFrom%3D%26dateTo%3D"
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print("Error fetching data: ", e)
        return SalaryResponse(year=salaryYear)

    soup = BeautifulSoup(response.text, 'html.parser')

    patternMinimal = re.compile(
        patternTextMinimal, re.IGNORECASE
    )
    # pattern = r'prognozowan[aej]* .*? wynagrodzen[aiy]* .*?(\d[\d\s]*)'
    # print("pattern: ", pattern)
    for tag in soup.find_all(['p', 'strong']):
        text = tag.get_text(strip=True).replace('\xa0', ' ')
        match = patternMinimal.search(text)
        if match:
            try:
                # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –∫—Ä–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ int
                salary_str = match.group(1).replace(" ", "").replace(".", "")
                salary = int(salary_str)
                # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –∑–Ω–∞–π—à–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∑–∞—Ä–ø–ª–∞—Ç—É, –∞ –Ω–µ —Å–µ—Ä–µ–¥–Ω—é,
                # –≤–∏ –º–æ–∂–µ—Ç–µ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —ó—ó, –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –ø–æ–ª—è –≤ SalaryResponse
                return SalaryResponse(year=salaryYear, avg_salary=salary)
            except ValueError:
                continue
    print("No match found for minimal salary.")
    # –∞–±–æ return None, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±–∞–∂–∞–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
    return SalaryResponse(year=salaryYear)


@app.get("/srednia_zus", response_model=SalaryResponse)
def get_avg_salary():
    result = fetch_avg_salary()
    if result.avg_salary is not None:
        # –ë–∞–∑–∞ ZUS —Ä–∞—Ö—É—î—Ç—å—Å—è –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—å–æ—ó, —Ç–æ–º—É —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó
        result.zus_base = round(result.avg_salary * 0.6, 2)
    return result
